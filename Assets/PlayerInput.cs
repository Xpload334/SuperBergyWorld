//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""CharacterControls"",
            ""id"": ""69f2bd62-06f7-429e-aaaf-63f0812e83e2"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6223fb4d-32d2-47c3-bea2-475cb38d5187"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d03935fc-5300-47d3-badf-d5a18a091249"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""af6f79f5-15fb-4c5b-a70a-bc0ea821090b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""f9026771-a9e0-4577-a321-5c4a95077576"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwapPrevious"",
                    ""type"": ""Button"",
                    ""id"": ""52957607-7a7a-4bc3-b20b-4bf9dc0cf484"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwapNext"",
                    ""type"": ""Button"",
                    ""id"": ""755e559b-8110-40a4-b8df-da6f2b51a371"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""302cb00b-0fb5-43cb-9308-78bcc57059d1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""82c15edf-176d-429b-9c63-560e9c0fc7b3"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4026cba5-ea47-4c89-9924-bad38103d7da"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d8639d85-2abc-4e51-aca7-ec7e55774d7e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c57b70e2-90a8-459d-951a-a994527b85ad"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""f2b1a96b-5ca4-4665-af6d-4ece2a531619"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""464b7dfd-3a50-4ab8-b6ff-27a7a7c402ad"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a790ebeb-2cb7-4537-83fd-c684a5f57a35"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c3671b6a-4165-47e3-a0e3-0b4cca57cca1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6a5247af-2ddb-4813-bc26-d25c9362bee3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cf5243ac-05d8-4d03-9a6d-5acfb4c32720"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10c9f920-c967-47c5-977e-a9c158e19e49"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwapNext"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3277d244-88b7-4e2d-abad-a1060e47debd"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""babbae2c-f876-402a-8dcc-edb08b790ffe"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3de4faa-ebf4-4c3b-a07f-18e4960173c0"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwapPrevious"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DialogueControls"",
            ""id"": ""01df8a3c-1e14-4b9c-a7d3-0dd40d3da9dc"",
            ""actions"": [
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""988806aa-e9ca-4603-b62f-6ed4c89e5d6b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skip"",
                    ""type"": ""Button"",
                    ""id"": ""bf11042f-c36f-40db-a7c7-21f1373b4b0b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""54ee0cef-2516-4a83-93a3-65737627a560"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f6a91d0-2671-4971-a3d0-9050eb928e7a"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CombatControls"",
            ""id"": ""762e8c45-8da3-40a0-905a-dfd7a33e4f68"",
            ""actions"": [
                {
                    ""name"": ""BasicAttack"",
                    ""type"": ""Button"",
                    ""id"": ""776bee07-41ac-471f-aadb-f133d991be87"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpecialAttack"",
                    ""type"": ""Button"",
                    ""id"": ""14445663-c5be-4526-b6b6-f6f672308077"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""010e3f09-cb24-4c95-9702-d4652fd6396a"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BasicAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d80c0c9-0f66-4d0f-a618-cbf1a4f301d6"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpecialAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterControls
        m_CharacterControls = asset.FindActionMap("CharacterControls", throwIfNotFound: true);
        m_CharacterControls_Movement = m_CharacterControls.FindAction("Movement", throwIfNotFound: true);
        m_CharacterControls_Jump = m_CharacterControls.FindAction("Jump", throwIfNotFound: true);
        m_CharacterControls_Interact = m_CharacterControls.FindAction("Interact", throwIfNotFound: true);
        m_CharacterControls_Action = m_CharacterControls.FindAction("Action", throwIfNotFound: true);
        m_CharacterControls_SwapPrevious = m_CharacterControls.FindAction("SwapPrevious", throwIfNotFound: true);
        m_CharacterControls_SwapNext = m_CharacterControls.FindAction("SwapNext", throwIfNotFound: true);
        // DialogueControls
        m_DialogueControls = asset.FindActionMap("DialogueControls", throwIfNotFound: true);
        m_DialogueControls_Confirm = m_DialogueControls.FindAction("Confirm", throwIfNotFound: true);
        m_DialogueControls_Skip = m_DialogueControls.FindAction("Skip", throwIfNotFound: true);
        // CombatControls
        m_CombatControls = asset.FindActionMap("CombatControls", throwIfNotFound: true);
        m_CombatControls_BasicAttack = m_CombatControls.FindAction("BasicAttack", throwIfNotFound: true);
        m_CombatControls_SpecialAttack = m_CombatControls.FindAction("SpecialAttack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterControls
    private readonly InputActionMap m_CharacterControls;
    private ICharacterControlsActions m_CharacterControlsActionsCallbackInterface;
    private readonly InputAction m_CharacterControls_Movement;
    private readonly InputAction m_CharacterControls_Jump;
    private readonly InputAction m_CharacterControls_Interact;
    private readonly InputAction m_CharacterControls_Action;
    private readonly InputAction m_CharacterControls_SwapPrevious;
    private readonly InputAction m_CharacterControls_SwapNext;
    public struct CharacterControlsActions
    {
        private @PlayerInput m_Wrapper;
        public CharacterControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_CharacterControls_Movement;
        public InputAction @Jump => m_Wrapper.m_CharacterControls_Jump;
        public InputAction @Interact => m_Wrapper.m_CharacterControls_Interact;
        public InputAction @Action => m_Wrapper.m_CharacterControls_Action;
        public InputAction @SwapPrevious => m_Wrapper.m_CharacterControls_SwapPrevious;
        public InputAction @SwapNext => m_Wrapper.m_CharacterControls_SwapNext;
        public InputActionMap Get() { return m_Wrapper.m_CharacterControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterControlsActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterControlsActions instance)
        {
            if (m_Wrapper.m_CharacterControlsActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnJump;
                @Interact.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnInteract;
                @Action.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnAction;
                @Action.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnAction;
                @Action.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnAction;
                @SwapPrevious.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnSwapPrevious;
                @SwapPrevious.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnSwapPrevious;
                @SwapPrevious.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnSwapPrevious;
                @SwapNext.started -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnSwapNext;
                @SwapNext.performed -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnSwapNext;
                @SwapNext.canceled -= m_Wrapper.m_CharacterControlsActionsCallbackInterface.OnSwapNext;
            }
            m_Wrapper.m_CharacterControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Action.started += instance.OnAction;
                @Action.performed += instance.OnAction;
                @Action.canceled += instance.OnAction;
                @SwapPrevious.started += instance.OnSwapPrevious;
                @SwapPrevious.performed += instance.OnSwapPrevious;
                @SwapPrevious.canceled += instance.OnSwapPrevious;
                @SwapNext.started += instance.OnSwapNext;
                @SwapNext.performed += instance.OnSwapNext;
                @SwapNext.canceled += instance.OnSwapNext;
            }
        }
    }
    public CharacterControlsActions @CharacterControls => new CharacterControlsActions(this);

    // DialogueControls
    private readonly InputActionMap m_DialogueControls;
    private IDialogueControlsActions m_DialogueControlsActionsCallbackInterface;
    private readonly InputAction m_DialogueControls_Confirm;
    private readonly InputAction m_DialogueControls_Skip;
    public struct DialogueControlsActions
    {
        private @PlayerInput m_Wrapper;
        public DialogueControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Confirm => m_Wrapper.m_DialogueControls_Confirm;
        public InputAction @Skip => m_Wrapper.m_DialogueControls_Skip;
        public InputActionMap Get() { return m_Wrapper.m_DialogueControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogueControlsActions set) { return set.Get(); }
        public void SetCallbacks(IDialogueControlsActions instance)
        {
            if (m_Wrapper.m_DialogueControlsActionsCallbackInterface != null)
            {
                @Confirm.started -= m_Wrapper.m_DialogueControlsActionsCallbackInterface.OnConfirm;
                @Confirm.performed -= m_Wrapper.m_DialogueControlsActionsCallbackInterface.OnConfirm;
                @Confirm.canceled -= m_Wrapper.m_DialogueControlsActionsCallbackInterface.OnConfirm;
                @Skip.started -= m_Wrapper.m_DialogueControlsActionsCallbackInterface.OnSkip;
                @Skip.performed -= m_Wrapper.m_DialogueControlsActionsCallbackInterface.OnSkip;
                @Skip.canceled -= m_Wrapper.m_DialogueControlsActionsCallbackInterface.OnSkip;
            }
            m_Wrapper.m_DialogueControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Confirm.started += instance.OnConfirm;
                @Confirm.performed += instance.OnConfirm;
                @Confirm.canceled += instance.OnConfirm;
                @Skip.started += instance.OnSkip;
                @Skip.performed += instance.OnSkip;
                @Skip.canceled += instance.OnSkip;
            }
        }
    }
    public DialogueControlsActions @DialogueControls => new DialogueControlsActions(this);

    // CombatControls
    private readonly InputActionMap m_CombatControls;
    private ICombatControlsActions m_CombatControlsActionsCallbackInterface;
    private readonly InputAction m_CombatControls_BasicAttack;
    private readonly InputAction m_CombatControls_SpecialAttack;
    public struct CombatControlsActions
    {
        private @PlayerInput m_Wrapper;
        public CombatControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @BasicAttack => m_Wrapper.m_CombatControls_BasicAttack;
        public InputAction @SpecialAttack => m_Wrapper.m_CombatControls_SpecialAttack;
        public InputActionMap Get() { return m_Wrapper.m_CombatControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatControlsActions set) { return set.Get(); }
        public void SetCallbacks(ICombatControlsActions instance)
        {
            if (m_Wrapper.m_CombatControlsActionsCallbackInterface != null)
            {
                @BasicAttack.started -= m_Wrapper.m_CombatControlsActionsCallbackInterface.OnBasicAttack;
                @BasicAttack.performed -= m_Wrapper.m_CombatControlsActionsCallbackInterface.OnBasicAttack;
                @BasicAttack.canceled -= m_Wrapper.m_CombatControlsActionsCallbackInterface.OnBasicAttack;
                @SpecialAttack.started -= m_Wrapper.m_CombatControlsActionsCallbackInterface.OnSpecialAttack;
                @SpecialAttack.performed -= m_Wrapper.m_CombatControlsActionsCallbackInterface.OnSpecialAttack;
                @SpecialAttack.canceled -= m_Wrapper.m_CombatControlsActionsCallbackInterface.OnSpecialAttack;
            }
            m_Wrapper.m_CombatControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @BasicAttack.started += instance.OnBasicAttack;
                @BasicAttack.performed += instance.OnBasicAttack;
                @BasicAttack.canceled += instance.OnBasicAttack;
                @SpecialAttack.started += instance.OnSpecialAttack;
                @SpecialAttack.performed += instance.OnSpecialAttack;
                @SpecialAttack.canceled += instance.OnSpecialAttack;
            }
        }
    }
    public CombatControlsActions @CombatControls => new CombatControlsActions(this);
    public interface ICharacterControlsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnAction(InputAction.CallbackContext context);
        void OnSwapPrevious(InputAction.CallbackContext context);
        void OnSwapNext(InputAction.CallbackContext context);
    }
    public interface IDialogueControlsActions
    {
        void OnConfirm(InputAction.CallbackContext context);
        void OnSkip(InputAction.CallbackContext context);
    }
    public interface ICombatControlsActions
    {
        void OnBasicAttack(InputAction.CallbackContext context);
        void OnSpecialAttack(InputAction.CallbackContext context);
    }
}
